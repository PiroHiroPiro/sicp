#lang racket

(require "../utils/common.rkt")

(define (runtime) (current-inexact-milliseconds))

(define (prime? n)
  (define (smallest-divisor n)
    (define (find-divisor n test-divisor)
      (define (divides? a b) (= (remainder b a) 0))
      (cond
        ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))
      )
    )
    (find-divisor n 2)
  )
  (= n (smallest-divisor n))
)

(define (timed-prime-test n)
  (define (start-prime-test n start-time)
    (define (report-prime elapsed-time)
      (display " *** ")
      (display elapsed-time)
    )
    ; (if (prime? n)
    (when (prime? n)
      (report-prime (- (runtime) start-time))
    )
  )
  ; (newline)
  (display n)
  (start-prime-test n (runtime))
  (newline)
)

(define (search-for-primes start end)
  (define (search-for-primes-iter start end)
    (when (and (< start end))
      (and (timed-prime-test start) (search-for-primes-iter (+ start 2) end))
    )
  )
  (search-for-primes-iter (+ start (if (even? start) 1 0)) end)
)

(define (fast-prime? n)
  (define (smallest-divisor n)
    (define (find-divisor n test-divisor)
      (define (divides? a b) (= (remainder b a) 0))
      (define (next n) (if (= n 2) 3 (+ n 2)))
      (cond
        ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))
      )
    )
    (find-divisor n 2)
  )
  (= n (smallest-divisor n))
)

(define (timed-fast-prime-test n)
  (define (start-prime-test n start-time)
    (define (report-prime elapsed-time)
      (display " *** ")
      (display elapsed-time)
    )
    ; (if (prime? n)
    (when (fast-prime? n)
      (report-prime (- (runtime) start-time))
    )
  )
  ; (newline)
  (display n)
  (start-prime-test n (runtime))
  (newline)
)

(define (search-for-fast-primes start end)
  (define (search-for-fast-primes-iter start end)
    (when (and (< start end))
      (and (timed-fast-prime-test start) (search-for-fast-primes-iter (+ start 2) end))
    )
  )
  (search-for-fast-primes-iter (+ start (if (even? start) 1 0)) end)
)

; (search-for-primes 1000 1100)
; (search-for-fast-primes 1000 1100)

; (search-for-primes 10000 10100)
; (search-for-fast-primes 10000 10100)

; (search-for-primes 100000 100100)
; (search-for-fast-primes 100000 100100)

(search-for-primes 1000000 1000100)
(search-for-fast-primes 1000000 1000100)
