#lang racket

(require "../utils/common.rkt")

(define (prime? n)
  (define (smallest-divisor n)
    (define (find-divisor n test-divisor)
      (define (divides? a b) (= (remainder b a) 0))
      (cond
        ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))
      )
    )
    (find-divisor n 2)
  )
  (= n (smallest-divisor n))
)

(define (fast-prime? n times)
  (define (fermat-test n)
    (define (try-it a)
      (define (expmod base exp m)
        (cond
          ((= exp 0) 1)
          ((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
          (else (remainder (* base (expmod base (- exp 1) m)) m))
        )
      )
      ; (define (expmod base exp m) (remainder (fast-expt base exp) m))
      (= (expmod a n n) a)
    )
    (try-it (+ 1 (random (- n 1))))
  )
  (cond
    ((= times 0) true)
    ((fermat-test n) (fast-prime? n (- times 1)))
    (else false)
  )
)

(prime? 561)
(prime? 1105)
(prime? 1729)
(prime? 2465)
(prime? 2821)
(prime? 6601)

(fast-prime? 561 10)
(fast-prime? 1105 10)
(fast-prime? 1729 10)
(fast-prime? 2465 10)
(fast-prime? 2821 10)
(fast-prime? 6601 10)
